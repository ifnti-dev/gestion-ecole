(function (e) {
    var t = {};

    function n(r) {
        if (t[r]) return t[r].exports;
        var a = t[r] = { i: r, l: !1, exports: {} };
        return e[r].call(a.exports, a, a.exports, n), a.l = !0, a.exports;
    }

    n.m = e, n.c = t, n.d = function (e, t, r) {
        n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: r });
    }, n.r = function (e) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 });
    }, n.t = function (e, t) {
        if (1 & t && (e = n(e)), 8 & t) return e;
        if (4 & t && "object" == typeof e && e && e.__esModule) return e;
        var r = Object.create(null);
        if (n.r(r), Object.defineProperty(r, "default", { enumerable: !0, value: e }), 2 & t && "string" != typeof e) for (var a in e) n.d(r, a, function (t) { return e[t] }.bind(null, a));
        return r;
    }, n.n = function (e) {
        var t = e && e.__esModule ? function () { return e.default } : function () { return e };
        return n.d(t, "a", t), t;
    }, n.o = function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
    }, n.p = "", n(n.s = 0);
})([function (e, t, n) {
    e.exports = n(1);
}, function (e, t) {
    function n(e, t) {
        for (var n = 0; n < t.length; n++) {
            var r = t[n];
            r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
    }

    var r = function () {
        function e() {
            !function (e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }(this, e);
        }

        var t, r, a;
        return t = e, a = [
            {
                key: "addEvent", value: function () {
                    var e = jQuery(".js-add-event"), t = "";
                    jQuery(".js-form-add-event").on("submit", (function (n) {
                        return (t = e.prop("value")) && (jQuery("#js-events").prepend('<li><div class="js-event p-2 text-white font-size-sm font-w500 bg-warning">' + jQuery("<div />").text(t).html() + "</div></li>"), e.prop("value", "")), !1;
                    }))
                }
            },
            {
                key: "initEvents", value: function () {
                    new FullCalendar.Draggable(document.getElementById("js-events"), {
                        itemSelector: ".js-event", eventData: function (e) {
                            return {
                                title: e.innerText,
                                backgroundColor: getComputedStyle(e).backgroundColor,
                                borderColor: getComputedStyle(e).backgroundColor
                            };
                        }
                    });
    
                }
            },
            {
                key: "initCalendar", value: function () {
                    var e = new Date, t = e.getDate(), n = e.getMonth(), r = e.getFullYear();
                    var calendar=new FullCalendar.Calendar(document.getElementById("js-calendar"), {
                        locale:'fr',
                        themeSystem: "bootstrap",
                        firstDay: 1,
                        editable: !0,
                        droppable: !0,
                        headerToolbar: {
                            left: "title",
                            right: "prev,next today dayGridMonth,timeGridWeek,timeGridDay,listWeek"
                        },
                        slotMinTime: "06:00:00", // Limiter les heures de début à 6h
                        slotMaxTime: "20:00:00", // Limiter les heures de fin à 20h
                        slotDuration: "00:15:00",
                        initialView: "timeGridWeek",
                        hiddenDays: [0],
                        drop: function (e) {
                            e.draggedEl.parentNode.remove();
                        },
                        eventRemove: function (info) {
                            // Code à exécuter lorsqu'un événement est retiré du calendrier
                            that.removeEvent(info.event);
                        },
                        events: [
                        ]
                    });
                    
                    calendar.render()
                    

                }
            },
            {
                key: "getEvents", value: function () {
                    // Récupérer tous les événements du calendrier
                    var calendarEvents = calendar.getEvents(); // Utilisez la référence à votre instance de calendrier
        
                    var formattedEvents = [];
    
                    // Formater les événements selon vos besoins
                    calendarEvents.forEach(function (event) {
                        formattedEvents.push({
                            title: event.title,
                            start: event.start,
                            end: event.end,
                            // Ajoutez d'autres propriétés d'événement que vous souhaitez récupérer
                        });
                    });
    
                    // Afficher les événements dans la console
                 
                    // Vous pouvez maintenant envoyer formattedEvents à votre backend via AJAX
                }
            },
            {
                key: "removeEvent", value: function (event) {
                    // Code pour retirer visuellement l'événement de la liste js-events
                    var jsEvents = $("#js-events");
                    var eventText = $("<div />").text(event.title).html();
                    jsEvents.find('.js-event:contains("' + eventText + '")').remove();
                },
                key: "init", value: function () {
                    this.addEvent(), this.initEvents(), this.initCalendar() , this.getEvents()
                }
            },
            
        ], (r = null) && n(t.prototype, r), a && n(t, a), e;
    }();
    

    jQuery((function () {
        r.init()


    }))
    jQuery("#btnEnregistrer").on("click", function() {
        // Récupérer la valeur de la semaine
        var semaine = jQuery("#semaine").val();
        // Vérifier si le champ semaine est vide
        if (semaine === '') {
            console.log('Le champ semaine est vide.');
        } else {
            // Récupérer tous les événements du calendrier
            var calendarEvents = $('#js-calendar');
            //var events = calendar.events;
            console.log(calendarEvents);

            // Créer un objet avec les données à envoyer
            var data = {
                semaine: semaine,
                events: events
            };

            // Effectuer la requête POST vers /planning/save
            $.ajax({
                type: 'POST',
                url: '/planning/save',
                data: JSON.stringify(data),
                contentType: 'application/json',
                success: function(response) {
                    console.log('Enregistrement réussi:', response);
                },
                error: function(error) {
                    console.error('Erreur lors de l\'enregistrement:', error);
                }
            });
        }
    });
}]);


