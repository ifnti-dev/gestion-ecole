Documentation pour deploy.sh
============================

Introduction
------------

Cette documentation explique ligne par ligne le script ``deploy.sh``, qui automatise le d√©ploiement de l'application web IFNTI.

Aper√ßu du Script
----------------

Le script ``deploy.sh`` g√®re le d√©ploiement de l'application IFNTI en effectuant les t√¢ches suivantes :

1. **Configuration du Service :** Configure et g√®re un service systemd (``ifnti.service``) pour ex√©cuter l'application web.

2. **Configuration de la Base de Donn√©es :** Configure une base de donn√©es PostgreSQL et un utilisateur pour l'application.

3. **Configuration de l'Environnement :** Cr√©e un environnement virtuel Python et installe les d√©pendances du projet.

4. **Initialisation du Projet :** Clone le d√©p√¥t du projet, copie la configuration de l'environnement et effectue les migrations Django.

5. **Gestion du Service systemd :** G√®re le cycle de vie du service systemd - arr√™t, d√©sactivation et suppression du service s'il existe d√©j√†.

Directives du Script
--------------------

1. **Variables :**

    .. code-block:: bash

        SYSTEM_D_ROOT_PATH="$(pwd)"

    D√©finit le chemin racine pour le service systemd.

    D√©placement vers le r√©pertoire /home :

    .. code-block:: bash

        cd

    D√©place vers le r√©pertoire personnel.

    Variables de Configuration du Service et de la Base de Donn√©es :

    .. code-block:: bash

        DB_NAME="ifnti_db"
        DB_USER="ifnti"
        DB_PASSWORD="ifnti"
        BASE_DIR="$(pwd)/projets"
        SERVICE_NAME="ifnti.service"
        SERVICE_FILE="/etc/systemd/system/$SERVICE_NAME"
        GIT_REPOSITORY="https://github.com/ifnti-dev/gestion-ecole.git"
        PROJECT_FOLDER_NAME="gestion-ecole"
        PROJECT_ENV_FOLDER=".ifnti_env"

    D√©finit des variables pour la configuration de la base de donn√©es, du projet et du service.

    Cr√©ation du Fichier de Service systemd :

    .. code-block:: bash

        echo "üöÄ Cr√©ation du fichier $SERVICE_NAME"
        touch $BASE_DIR/$SERVICE_NAME
        # ... (cr√©ation du contenu)

    Cr√©e le fichier de service systemd s'il n'existe pas, avec des configurations sp√©cifiques.

    Gestion du Service Existante :

    .. code-block:: bash

        if [ -e "$SERVICE_FILE" ]; then
            # ... (arr√™t, d√©sactivation, suppression et rechargement du d√©mon systemd)
        fi

    V√©rifie si le fichier de service existe et g√®re le service existant en cons√©quence.

    Cr√©ation des R√©pertoires du Projet :

    .. code-block:: bash

        mkdir -p $BASE_DIR
        cd $BASE_DIR

    Cr√©e la structure des r√©pertoires du projet.

    Installation des D√©pendances :

    .. code-block:: bash

        echo "üîç üåÄ Installation des d√©pendances en cours..."
        sudo apt-get install git postgresql texmaker python3-virtualenv redis

    Installe les d√©pendances n√©cessaires √† l'aide de apt-get.

    Configuration de la Base de Donn√©es PostgreSQL :

    .. code-block:: bash

        echo "‚öôÔ∏è Configuration de la base de donn√©es..."
        # ... (configuration de la base de donn√©es PostgreSQL et de l'utilisateur)

    Configure la base de donn√©es PostgreSQL et l'utilisateur pour l'application.

    Cr√©ation et Activation de l'Environnement Virtuel :

    .. code-block:: bash

        echo "üîß Cr√©ation de l'environnement virtuel..."
        # ... (cr√©ation et activation de l'environnement virtuel Python)

    Cr√©e et active l'environnement virtuel Python.

    Clone du D√©p√¥t du Projet :

    .. code-block:: bash

        if [ ! -d "$PROJECT_FOLDER_NAME" ]; then
            git clone $GIT_REPOSITORY
        fi
        cd $PROJECT_FOLDER_NAME
        cp $SYSTEM_D_ROOT_PATH/.env .env

    Clone le d√©p√¥t du projet s'il n'existe pas et copie la configuration de l'environnement.

    Installation des D√©pendances Python :

    .. code-block:: bash

        echo "üì¶ Installation des d√©pendances Python..."
        $BASE_DIR/$PROJECT_ENV_FOLDER/pip install -r requirements.txt

    Installe les d√©pendances Python √† l'aide de pip.

    Migrations Django :

    .. code-block:: bash

        echo "‚öôÔ∏è Cr√©ation des migrations..."
        $BASE_DIR/$PROJECT_ENV_FOLDER/bin/python3 manage.py makemigrations
        echo "üöö Application des migrations..."
        $BASE_DIR/$PROJECT_ENV_FOLDER/bin/python3 manage.py migrate

    Effectue les migrations de base de donn√©es Django.

    Insertion des Donn√©es de Base :

    .. code-block:: bash

        echo "üöö Insertion des donn√©es de base..."
        $BASE_DIR/$PROJECT_ENV_FOLDER/bin/python3 manage.py factory

    Ins√®re des donn√©es de base dans la base de donn√©es.

    Cr√©ation du Superutilisateur :

    .. code-block:: bash

        echo "üë§ Cr√©ation d'un superutilisateur..."
        $BASE_DIR/$PROJECT_ENV_FOLDER/bin/python3 manage.py createsuperuser

    Cr√©e un superutilisateur pour l'application Django.

    Copie du Fichier de Service et Activation du Service :

    .. code-block:: bash

        echo "üìÑ Copie de $SERVICE_NAME vers : $SERVICE_FILE"
        sudo cp $BASE_DIR/$SERVICE_NAME $SERVICE_FILE
        echo "‚ñ∂Ô∏è D√©marrage de $SERVICE_NAME"
        sudo systemctl start $SERVICE_NAME
        echo "üîî Activation de $SERVICE_NAME"
        sudo systemctl enable $SERVICE_NAME

    Copie le fichier de service systemd dans le r√©pertoire appropri√© et d√©marre/active le service.

    Rechargement du D√©mon et V√©rification de l'√âtat :

    .. code-block:: bash

        echo "‚ôªÔ∏è Reload du d√©mon"
        sudo systemctl daemon-reload
        sudo systemctl status $SERVICE_NAME

    Recharge le d√©mon systemd et v√©rifie l'√©tat du service.

2. Message de Conclusion :

    .. code-block:: bash

        echo "‚úÖ Configuration termin√©e !"

Conclusion
----------

Ce script automatise le processus de d√©ploiement et de configuration de l'application web IFNTI, couvrant la configuration du service, la configuration de la base de donn√©es, la cr√©ation de l'environnement, l'initialisation du projet et la gestion du service systemd.
